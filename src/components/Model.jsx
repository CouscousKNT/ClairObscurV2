/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import { useScroll, useTransform } from "motion/react";

export function Model(props) {
  // VARIABLES EFFET LEVITATION / FLOAT EFFECT VARS
  const enableFloatingEffect = true;
  const floatSpeed = 1.1;
  const floatAmplitude = 0.09;

  // VARIABLES EFFET ROTATION / ONSCROLL ROTATION EFFECT VARS
  const rotationSpeed = 6;

  const baseXRotation = -0.6;

  const { nodes, materials } = useGLTF("/logo.glb");
  const { size } = useThree();

  const targetRef = useRef(); // prettier-ignore

  const { scrollYProgress } = useScroll();
  const positionY = useTransform(scrollYProgress, [0.28, 0.71], [2, -1.9]);
  const rotationX = useTransform(scrollYProgress, [0.28, 0.71], [0, 1.9]);

  useFrame(() => {
    if (!targetRef.current) return;
    targetRef.current.position.y = positionY.get() * 1.2;
    targetRef.current.rotation.x =
      rotationX.get() * rotationSpeed + baseXRotation;
    // console.log(targetRef.current.position);
    console.log(scrollYProgress.get());

    floatingEffect();
  });

  function floatingEffect() {
    if (enableFloatingEffect) {
      const floatOffset =
        Math.sin(Date.now() * 0.001 * floatSpeed) * floatAmplitude;
      targetRef.current.position.y += floatOffset;
    }
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={targetRef}
        position={[0, 2, 0]}
        castShadow
        receiveShadow
        geometry={nodes.Curve.geometry}
        material={materials["Material.001"]}
        rotation={[0, -0.65, 0.5]}
        scale={size.width >= 1024 ? 45 : 30}
      />
    </group>
  );
}

useGLTF.preload("/logo.glb");
